==58328== Cachegrind, a cache and branch-prediction profiler
==58328== Copyright (C) 2002-2017, and GNU GPL'd, by Nicholas Nethercote et al.
==58328== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==58328== Command: ./srr-large
==58328== 
--58328-- warning: L3 cache found, using its data for the LL simulation.
--58328-- warning: specified LL cache: line_size 64  assoc 11  total_size 25,952,256
--58328-- warning: simulated LL cache: line_size 64  assoc 12  total_size 25,165,824
Random cache replacement will be used
==58328== brk segment overflow in thread #1: can't grow to 0x4a4b000
==58328== (see section Limitations in user manual)
==58328== NOTE: further instances of this message will not be shown
==58328== 
==58328== Process terminating with default action of signal 11 (SIGSEGV)
==58328==  Access not within mapped region at address 0x0
==58328==    at 0x10952E: get_b (in /home/tkloda/cortexsuite/cortex/srr/srr-large)
==58328==  If you believe this happened as a result of a stack
==58328==  overflow in your program's main thread (unlikely but
==58328==  possible), you can try to increase the size of the
==58328==  main thread stack using the --main-stacksize= flag.
==58328==  The main thread stack size used in this run was 8388608.
==58328== 
==58328== I   refs:      722,212,150
==58328== I1  misses:          3,206
==58328== LLi misses:          1,415
==58328== I1  miss rate:        0.00%
==58328== LLi miss rate:        0.00%
==58328== 
==58328== D   refs:      282,394,809  (179,737,377 rd   + 102,657,432 wr)
==58328== D1  misses:     13,206,410  ( 12,344,706 rd   +     861,704 wr)
==58328== LLd misses:        421,692  (     47,631 rd   +     374,061 wr)
==58328== D1  miss rate:         4.7% (        6.9%     +         0.8%  )
==58328== LLd miss rate:         0.1% (        0.0%     +         0.4%  )
==58328== 
==58328== LL refs:        13,209,616  ( 12,347,912 rd   +     861,704 wr)
==58328== LL misses:         423,107  (     49,046 rd   +     374,061 wr)
==58328== LL miss rate:          0.0% (        0.0%     +         0.4%  )
